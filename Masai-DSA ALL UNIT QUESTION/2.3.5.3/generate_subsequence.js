// Generate all subsequence 
// Description

// A String is a subsequence of a given String, that is generated by deleting some 
// character of a given string without changing its order.
// You are given a string S. You have to generate all the subsequences of the string S 
// using a recursive approach (duplicates allowed)

// Input
// Input Format :
// First line of the input contains length of the string S
// Second line of the test case contains the string S

// Constraints :
// n <= 18

// Output
// Output all the substring in a particular order. To understand the order of printing, see the sample test case explanation

// Sample Input 1 
// 4
// abcd

// Sample Output 1
// a
// ab
// abc
// abcd
// abd
// ac
// acd
// ad
// b
// bc
// bcd
// bd
// c
// cd
// d

// Hint
// Output Explanation :
// First output all the subsequences starting with first character. When all such 
// subsequences got printed, then move to print all such starting with second chars, and so on.


// function subsequence(str,N,index,curr){
//     if(index==N)return
//     if(curr.length!=0){
//         console.log(curr)
//     }
//     for(var i=index+1;i<N;i++){
//         subsequence(str,N,i,curr+str[i])
//     }
// }

// subsequence("abcd",4,-1,"")

// function subsequence(str,N,index,curr){
//     if(index==N)return
//     if(curr.length!=0){
//         console.log(curr)
//     }
//     for(var i=index+1;i<N;i++){
//         curr+=str[i]
//         subsequence(str,N,i,curr)
//         curr=curr.replace(curr[curr.length-1],"")
//     }
//     return curr
// }

// subsequence("abcd",4,-1,"")



// function solve(str,curr){
//     if(str==""){
//         console.log(curr)
//         return
//     }
//     var now=str[0]
//     curr+=now
//     solve(str.slice(1),curr)
//     curr=curr.slice(0,curr.length-1)
//     solve(str.slice(1),curr)
// }
    
// solve("abcd","")